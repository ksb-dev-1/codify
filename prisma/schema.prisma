// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  topics           Topic[]
  questions        Question[]
  questionStatuses QuestionStatus[]
  bookmark         Bookmark[]
  payments         Payment[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  paymentIntentId String
  amount          Float
  status          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Topic {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdBy User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Bookmark {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  createdAt  DateTime @default(now())
}

model Question {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  question         String
  codeSnippet      String?
  options          Json
  correctOption    String
  explanation      String?
  topic            Topic            @relation(fields: [topicId], references: [id])
  topicId          String           @db.ObjectId
  createdBy        User             @relation(fields: [userId], references: [id])
  userId           String           @db.ObjectId
  difficulty       String
  isPremium        Boolean          @default(false)
  questionStatuses QuestionStatus[]
  bookmarks        Bookmark[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model QuestionStatus {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String   @db.ObjectId
  status      String
  isCorrect   Boolean
  completedAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
